#include<stdio.h>
#include<conio.h>
#define INFINITY 9999
#define MAX 10
void dijkstra(int G[MAX][MAX],int n,int startnode);
int main()
{
    int G[MAX][MAX],i,j,n,u;
    printf("enter no.of vertices:");
    scanf("%d",&n);
    printf("\nenter the adjacency matrix:\n");
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            scanf("%d",&G[i][j]);
    printf("\nenter the starting node:");
    scanf("%d",&u);
    dijkstra(G,n,u);
    return 0;
}
void dijkstra(int G[MAX][MAX],int n,int startnode)
{
    int cost[MAX][MAX],distance[MAX],pred[MAX];
    int visited[MAX],count,mindistance,nextnode,i,j;
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            if(G[i][j]==0)
				cost[i][j]=INFINITY;
			else
				cost[i][j]=G[i][j];
	
	for(i=0;i<n;i++)
	{
		distance[i]=cost[startnode][i];
		pred[i]=startnode;
		visited[i]=0;

}
distance[startnode]=0;
	visited[startnode]=1;
	count=1;
	
	while(count<n-1)
	{
		mindistance=INFINITY;
		
		for(i=0;i<n;i++)
			if(distance[i]<mindistance&&!visited[i])
			{
				mindistance=distance[i];
				nextnode=i;
			}
			visited[nextnode]=1;
			for(i=0;i<n;i++)
				if(!visited[i])
					if(mindistance+cost[nextnode][i]<distance[i])
					{
					    distance[i]=mindistance+cost[nextnode][i];
						pred[i]=nextnode;
					}
		count++;
	}

	for(i=0;i<n;i++)
		if(i!=startnode)
		{
			printf("\nDistance of node%d=%d",i,distance[i]);
			printf("\nPath=%d",i);
			
			j=i;
			do
			{
				j=pred[j];
				printf("<-%d",j);
			}while(j!=startnode);
	}
}

****************************************************************************************
OUTPUT:

enter no.of vertices:4

enter the adjacency matrix:
0  1 1 1
1 0 1 0
1 1 0 1
1 0 1 0

enter the starting node:1

Distance of node0=1
Path=0<-1
Distance of node2=1
Path=2<-1
Distance of node3=2
Path=3<-0<-1

*******************************************************************************************



















#include <stdio.h>
#define INF 9999
#define MAX 10

void dijkstra(int G[MAX][MAX], int n, int start) {
    int dist[MAX], pred[MAX], visited[MAX] = {0};
    for (int i = 0; i < n; i++) {
        dist[i] = (G[start][i] == 0) ? INF : G[start][i];
        pred[i] = start;
    }
    dist[start] = 0, visited[start] = 1;

    for (int count = 1; count < n; count++) {
        int min = INF, next;
        for (int i = 0; i < n; i++)
            if (!visited[i] && dist[i] < min) min = dist[i], next = i;
        visited[next] = 1;
        for (int i = 0; i < n; i++)
            if (!visited[i] && dist[next] + G[next][i] < dist[i])
                dist[i] = dist[next] + G[next][i], pred[i] = next;
    }

    for (int i = 0; i < n; i++)
        if (i != start) {
            printf("\nDistance to node %d = %d\nPath: %d", i, dist[i], i);
            for (int j = i; j != start; j = pred[j])
                printf(" <- %d", pred[j]);
        }
}

int main() {
    int G[MAX][MAX], n, start;
    printf("Enter vertices and adjacency matrix:\n");
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &G[i][j]);
    printf("Enter starting node: ");
    scanf("%d", &start);
    dijkstra(G, n, start);
    return 0;
}
