#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define NOF_PACKETS 10

int generate_random(int a) {
    int rn = (random() % 10) % a;
    return rn == 0 ? 1 : rn;
}

int main() {
    int packet_sz[NOF_PACKETS], i, clk, b_size, o_rate, p_sz_rm = 0, p_time, op;

    // Generate random packet sizes
    for (i = 0; i < NOF_PACKETS; ++i)
        packet_sz[i] = generate_random(6) * 10;

    // Display generated packet sizes
    for (i = 0; i < NOF_PACKETS; ++i)
        printf("\nPacket[%d]: %d bytes\t", i, packet_sz[i]);

    // Get user input
    printf("\nEnter the Output Rate: ");
    scanf("%d", &o_rate);

    printf("Enter the Bucket Size: ");
    scanf("%d", &b_size);

    // Process each packet
    for (i = 0; i < NOF_PACKETS; ++i) {
        if ((packet_sz[i] + p_sz_rm) > b_size) {
            if (packet_sz[i] > b_size) { // Packet size exceeds bucket capacity
                printf("\n\nIncoming packet size (%d bytes) is greater than bucket capacity (%d bytes) - PACKET REJECTED", packet_sz[i], b_size);
            } else {
                printf("\n\nBucket capacity exceeded - PACKETS REJECTED!!");
            }
        } else {
            // Accept packet
            p_sz_rm += packet_sz[i];
            printf("\n\nIncoming Packet Size: %d", packet_sz[i]);
            printf("\nBytes Remaining to Transmit: %d", p_sz_rm);

            p_time = generate_random(4) * 10;
            printf("\nTime Left for Transmission: %d units", p_time);

            // Simulate transmission
            for (clk = 10; clk <= p_time; clk += 10) {
                sleep(1);
                if (p_sz_rm > 0) {
                    if (p_sz_rm <= o_rate) { // If remaining size is less than or equal to output rate
                        op = p_sz_rm;
                        p_sz_rm = 0;
                    } else {
                        op = o_rate;
                        p_sz_rm -= o_rate;
                    }
                    printf("\nPacket of size %d transmitted", op);
                    printf(" --- Bytes Remaining to Transmit: %d", p_sz_rm);
                } else {
                    printf("\nTime left for transmission: %d units", p_time - clk);
                    printf("\nNo packets to transmit!!");
                    break;
                }
            }
        }
    }
    return 0;
}






*******************************************************************************************************

Packet[0]: 30 bytes
Packet[1]: 10 bytes
Packet[2]: 10 bytes
Packet[3]: 50 bytes
Packet[4]: 30 bytes
Packet[5]: 50 bytes
Packet[6]: 10 bytes
Packet[7]: 20 bytes
Packet[8]: 30 bytes
Packet[9]: 10 bytes
Enter the Output Rate: 4
Enter the Bucket Size: 7


Incoming packet size (30 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (10 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (10 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (50 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (30 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (50 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (10 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (20 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (30 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED

Incoming packet size (10 bytes) is greater than bucket capacity (7 bytes) - PACKET REJECTED



*********************************************************************************************************
